
# from adventofcode.inputs import get_input
# from adventofcode.utils import aoc_timer
import logging
import math
from heapq import heappop, heappush
from collections import Counter
logging.basicConfig()

logger = logging.getLogger(__name__)

N = -1j
S = 1j
E = 1
W = -1



def parse_input(i):
    elves_coord_lst = []
    lines = i.split("\n")
    for i_y, l in enumerate(lines):
        for i_x, c in enumerate(l):
            if c == ".":
                pass
            elif c == "#":
                elves_coord_lst.append(i_x + i_y  * 1j)

        if logger.level <= logging.DEBUG:
            logger.debug(f"after `{l}` found `{len(elves_coord_lst)}' blizz")

    return elves_coord_lst

BUMPS = [N, N+E, N+W, W, E, S, S+W, S+E]

def elf_wish(elf_coord, elves_coord_lst, elves_coord_set, turn):
    '''
    gets the coordinates the elves would like to go to
    :param elf_coord:
    :return:
    '''
    has_neighbour = False
    for d in BUMPS:
        if d + elf_coord in elves_coord_set:
            has_neighbour = True
            break

    if has_neighbour:
        for i in range(4):
            order = (i + turn) % 4

            if order == 0 and elf_coord + N not in elves_coord_set and elf_coord + N + E not in elves_coord_set  and elf_coord + N + W not in elves_coord_set:
                return elf_coord + N
            elif order == 1 and elf_coord + S not in elves_coord_set and elf_coord + S + E not in elves_coord_set  and elf_coord +S + W not in elves_coord_set:
                return elf_coord + S
            elif order == 2 and elf_coord + W not in elves_coord_set and elf_coord + W + N not in elves_coord_set  and elf_coord + W + S not in elves_coord_set:
                return elf_coord + W
            elif order == 3 and  elf_coord + E not in elves_coord_set and elf_coord + E + N not in elves_coord_set and elf_coord + E + S not in elves_coord_set:
                return elf_coord + E

    return elf_coord

def solve_puzzle(elves_coord_lst, stop_turn=None):
    turn = 0

    if logger.level <= logging.DEBUG:
        print_state(elves_coord_lst, turn)


    while True:
        elves_coord_set = set(elves_coord_lst)
        elf_wish_lst = [elf_wish(x, elves_coord_lst, elves_coord_set, turn) for x in elves_coord_lst]
        c = Counter(elf_wish_lst)
        moved = 0
        for elf_id, (elf_coord, wish) in enumerate(zip(elves_coord_lst, elf_wish_lst)):
            if c[wish] == 1 and elves_coord_lst[elf_id] != wish:
                elves_coord_lst[elf_id] = wish
                moved += 1
            else:
                pass
        if not moved:
            return turn , find_min_rect_area(elves_coord_lst)
        turn += 1

        if logger.level <= logging.DEBUG:
            print_state(elves_coord_lst, turn)

        if turn == stop_turn:
            return turn, find_min_rect_area(elves_coord_lst)


def find_min_rect_area(elves_coord_lst):
    x_min = min(int(c.real) for c in elves_coord_lst)
    x_max = max(int(c.real) for c in elves_coord_lst)
    y_min = min(int(c.imag) for c in elves_coord_lst)
    y_max = max(int(c.imag) for c in elves_coord_lst)
    return (x_max - x_min + 1) * (y_max - y_min + 1) - len(elves_coord_lst)

def print_state(elves_coord_lst, turn):
    '''
    Debug function to print the grid
    '''
    x_min = min(int(c.real) for c in elves_coord_lst)
    x_max = max(int(c.real) for c in elves_coord_lst)
    y_min = min(int(c.imag) for c in elves_coord_lst)
    y_max = max(int(c.imag) for c in elves_coord_lst)

    row_lst = []
    for y in range(y_min, y_max + 1):
        row = ""
        for x in range(x_min, x_max +1):
            if x + y * 1j in elves_coord_lst:
                row += "#"
            else:
                row += "."
        row_lst.append(row)

    logger.debug(f"Turn{turn}\n" + "\n".join(row_lst))



if __name__ == '__main__':
    # logger.setLevel(logging.DEBUG)
    logger.setLevel(logging.INFO)

#     example = '''.....
# ..##.
# ..#..
# .....
# ..##.
# .....'''
#     elves_coord_lst = parse_input(example)
#     t = solve_puzzle(elves_coord_lst)
#     print(t)

    example = '''..............
..............
.......#......
.....###.#....
...#...#.#....
....#...##....
...#.###......
...##.#.##....
....#..#......
..............
..............
..............
'''
    elves_coord_lst = parse_input(example)
    t = solve_puzzle(elves_coord_lst, stop_turn=10)
    print(f"part 1 solution: {t[1]}")

    part1 = '''.##...###..#.##...#.#..#.#.###.#.####......#.##.##.#.#..##......#..##...
.###.#.##.#.##.###.####.####.##...#..##.#..##..##.####..#.##..###.##....
##.#..#.#.####.###.##....##.##...##..###.###..###....#.#..##.##..#..#.#.
#..##.#.....#.##.#......#.###..##.##.........###...##.#.#..#.....###.#..
..#...##..##.....#...#.#..#.##..##.#.#..#.#...#.###.#.#.#.....#..##..###
#.####.#..#..#######..##.###...##..#...#..#.#..##..##.#......#.#.#.###..
#.####.###..###.####..#.#.##...##....#.#.##..#.#..#..###.#..#...#.#....#
..#.#.#...#.....#.###..#####.###.####..#.#..#.#......##..#####..#..#.#..
....#...####..#.###..##.###....#...####.##...##.##.#.###.#...####.#.##.#
#..#######..#.###.###..##..#..###......###..###.#.#####.##..#..#..###..#
.#...#....##......#..###.##.####.#.#...#.####.#....##.##.#....###..##.#.
..##..#...#..##....#...#..#.#.##..###...#..###.#...#######....###..####.
#.#..##.###..##.#.#####..#....#.##.#.##.......##.##.....#..###.#....##..
#..#.##...###.##..#...##.######...#...####.#...###..##.###..#.#.###.#.#.
##.#....####...#..##..##.####.###...#..####...#.#...##.####.#.##....##..
#.#..#.#.......#.###.#.#.###.###.#..##..#.#.####..###.######.####.....#.
###.....##...#.#.#.#..##...##.#.#.#.#..##.#.....#.####.##.#...#.####...#
###.#.##....##..###.#.##..######.#.##...#...##.#..#.##.######..#...#..##
####......####....##.#.#..#.##....#####.#..####.#####.##..###.#.#..###.#
..#..####...####.######.#.#.###..#.###....#..#..#.#.....####...#...##.#.
............####...###.#..#####..#..###.....#.#.##..#..#....#..#.#.##.#.
###..#####..#...##.#####.....##....##..##.##.#.##..#.#.#.#.....#.####.##
.#..#.######.#...#.#######......#...#.#.###..####....##....##..##..##..#
#.###.#.#.#..####.##..##.#..###..#..#.#.#..#.#..#..#..##...####.#...##.#
........#..#..###.###.##..######..#...###...#.##.##...##.###...#.#......
.###..#.####.###..#..###...###.####.####..#....#.#.#.#.#.#.##.#.####...#
#.#..##.......##.#.#.#.#.#.#####..........##.######.##.##....##......##.
.#.#...#...#.###..#.##..#...#....####...#####.###.#...##....###...##.#.#
#..........##.##.#.##.#....##....##...###...##.#.#.####.####....#...#.##
####...#.##...##..#.##....###.#.###..#.##...#.###.###...#..#####....#..#
...##.......#.#.#....##..#####.#.#.##.###.#.#.#.###.#####...#.#...#.##..
.##...#...##..####.#######..##..###...#..#.....##.#.#.###...#..##.##.##.
.#.######.##.###...#..#...#..#..#.###.#....##.#####..###.###.##.#.#.##..
.#####..#...#..##.##..####.##...##..#..#.#..#...##.######..#..###..##..#
...#.......##...#.###.#.#..#########...#..#.###.#.#.###.#.#.####.#..#...
.#.##.#..#.###.#.#.#.#.#.#..###..#...####..#..#.#.#.#####.#.######.##.##
...#....#..####.....##...#####.#..#.##.#.###.#...#.#..###.#..##..##.##..
.#.##.#...#..#.#..#..#....#...#.....######..##.#.##.#.#..##...#...##.#..
...##.########.........####........#.#..#...##.##.##..##.##.##.###..####
##...#...##..#...###...#.######......##...#..#.#.#.##..##.....##.#...#..
..###.#...#..#####.#.....#.#.###.#.#.#.##.#.####.##..#...#...#.###.###..
.####...###..#.....####..#..######.#.....###..#....#....####...#.#.##..#
#..#.#..##.#..#...#.#..#..###..##..##.##.#.#.#..##...#.#..####.###....#.
###....#.##..####.##.##.#.#..#####.#.##..#.#....#....#.#.##.....#..####.
#..##.####.##..##......#.#...#.####.#.####....###...#....#...#####...##.
...#..##.#.#.....#.#..#.#..#......####.###..##.##..##..#####...####..#.#
..#.#.#....#.##.....#..#.#.##...#.##....##.##...#.#.###.#####..#.#..#.##
##..######.#....#.######.#..##.###..#.....##.##.#.#..##....####...#....#
.######.##.#.......####..#.#.###...#....#......##..###.#........#..#.##.
##.....#.#.##.....#####.#...#..##.##..####.#..#..#....#.#.######..##..#.
#.##....###.#.##.###.#.##..###..#..####..#.#.###..#.##..#...#...#..#.###
..#.###..####.######.###...####..#.######..#...#.##...###.#.####.######.
.....#.###.....#.##.####.#.#....###.#.#.#.#.###.#........#....##..#..###
.##.....#.#.....#..#.#......#.#.##...#####.####..#.#..###......#....##..
.##.....#.#......#.#.##.#.#.#....##.##.####..#####.#.#..#..##...#.##.###
##...##...#....###...##.#..##.##.#.#.##.#.#.##....#.#.##...#####.##....#
.#...##...#.....#####...#.#.#.###...#.#.....#..#.#.#...#...#.#..####.#.#
.##...######..##.#.##.##.#.......#.######..#.##...#..#...#.####..#.#.#..
.#...##.##.#..########...#####.......#...####.....###.##....#.#####.#...
#.#....#..###.#...###...###.#..#...#..##..#..#.#.##...#.#.###...###.###.
###.#...#.#....#..#..#.####.#..##.##.#..##.##...###...##.#.####.#.#....#
#.#.#...#..#####....#.#.#..##.....#..##..##.....#..#..........##.#.###.#
##.#...##..#.##....#.#...#...##..##.#..##.#.........##.###.#.#.#.....#..
.##...#...#...####.#...#.####.###.#.#.#.#....##...##.#.##.#.#.##.#######
#...#.##..........#.##.###....#.####.#.###..#.#.#.....###.#.#####..##.#.
.#...##.......##.#..##.##..###........#.#..#..###...#.##..#...##...#..##
.#.#.#.#.##....##..######..#...###.##....#####...##.......#####.#...###.
.#..######...##..##.#....##.#..#.#.###..#...########..###.#.....##..###.
...#..#..#.#######...####....##......#......#..######..#.####.#.#..#...#
.#####.#####..####.###..#....#...###.##.##..#.###.#..#.#..#.##.#....#...
#..###.####..#.....####.#.#..##..##.#.####...#.#..#..#.###.#.###........
#.##.#.##...#...#.#.#.###.#..##.##..##.#....#..#.....#...####.#.#...#.##'''

    elves_coord_lst = parse_input(part1)
    t = solve_puzzle(elves_coord_lst)
    print(f"part 2 solution: {t[0]+1}")     # add 1 because we stop before adding to the counter 
    
